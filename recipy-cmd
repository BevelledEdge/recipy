#!/usr/local/bin/python
"""recipy - a frictionless provenance tool for Python

Usage:
  recipy-cmd [options] <outputfile>
  recipy-cmd (-h | --help)
  recipy-cmd --version

Options:
  -h --help     Show this screen
  --version     Show version
  -a --all      Show all results (otherwise just latest result given)
  -f --fuzzy    Use fuzzy searching on filename
  -r --regex    Use regex searching on filename
  -v --verbose  Be verbose
  -d --diff     Show diff
  --debug       Turn on debugging mode

"""
import os
import re
from docopt import docopt
from tinydb import TinyDB, where
import sys
from pprint import pprint
from jinja2 import Template
from dateutil.parser import parse



def print_result(r):
  # Print a single result from the search
    template = """Run ID: {{ unique_id }}
Created by {{ author }} on {{ date }}
Ran {{ script }} using {{ command }}
{% if gitcommit is defined %}
Git: commit {{ gitcommit }}, in repo {{ gitrepo }}, with origin {{ gitorigin }}
{% endif %}
Environment: {{ environment|join(", ") }}
{% if inputs|length == 0 %}
Inputs: none
{% else %}
Inputs:
{% for input in inputs %}
  {{ input }}
{% endfor %}
{% endif %}

Outputs:
{% for output in outputs %}
  {{ output }}
{% endfor %}"""
    template = Template(template, trim_blocks=True)
    print template.render(**r)

if __name__ == '__main__':
    args = docopt(__doc__, version='recipy-cmd v0.1')
    
    if args['--debug']:
        print(args)

    db = TinyDB('recipyDB.json') 

    filename = args['<outputfile>']

    if args['--fuzzy']:
      results = db.search(where('outputs').any(lambda x: re.match(".+%s.+" % filename, x)))
    elif args['--regex']:
      results = db.search(where('outputs').any(lambda x: re.match(filename, x)))
    else:
      results = db.search(where('outputs').any(os.path.abspath(filename)))

    def change_date(result):
      result['date'] = result['date'].replace('{TinyDate}:', '')
      return result

    results = [change_date(result) for result in results]

    # Sort the results
    results = sorted(results, key = lambda x: parse(x['date']), reverse=True)

    if len(results) == 0:
        print "No results found"
    else:
        if args['--all']:
            for r in results:
                print_result(r)
                print "-"*40
        else:
            print_result(results[-1])
            if len(results) > 1:
                print "** Previous runs creating this output have been found. Run with --all to show. **"

            if args['--diff']:
              if 'diff' in results[0]:
                print "\n\n"
                print results[0]['diff']

    db.close()
